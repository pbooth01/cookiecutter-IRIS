Class IRISSrc.Util.BaseCodeDesc Extends %Persistent [ Abstract, NoExtent ]
{
	Property Description As %String [ Required ];
	
	Property Code As %String [ Required ];
	
	Index CodeIndex On Code [ Unique ];
	
	ClassMethod OpenOrCreateByCode(pCode As %String, Output pObject As %Persistent) As %Status
	{
		Set tSC = $$$OK
		Try
		{
			// First, let's normalize the code just to be safe
			// That is not strictly necessary to search the index. The autogenerated method
			// CodeIndexOpen will normalize it for us before searching. But removing spaces 
			// is not part of the normalization and keeping the code uniform helps to keep
			// things clean.
			Set tDescription=$ZStrip(pCode, "<>W")
			Set tCode = $ZConvert(tDescription,"U")
			
			// Let's try to find the object by it's code, using the index:
			Set pObject = ..CodeIndexOpen(tCode,,.tSC)
			
			// We must always check the status code:
			If $System.Status.IsError(tSC)
			{
				// If the error is something different from "object does not exist", 
				// let's quit because something went really wrong...
				If $System.Status.GetErrorCodes(tSC)'["5770"
				{
					Quit
				}
				
				// If I am here, that is because the error is "object does not exist"
				// So let's reset it to Ok, because we are going to create this object...
				Set tSC = $$$OK
			}
			
			// If I found the object, we are done!
			Quit:$IsObject(pObject)
			
			// If not, let's create it:
			Set pObject = ..%New()
			Set pObject.Code=tCode
			Set pObject.Description=tDescription
			
			// I will not call %Save on this. I will let it be called by the object that 
			// is pointing to this new object, as part of a single transaction.
		}
		Catch (oException)
		{
			Set tSC = oException.AsStatus()
		}
		
		Quit tSC
	}
}